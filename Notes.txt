 RANDOM:
-------

() vs {}
An expression evaluates to a value.A block executes statements and does not evaluate to a value.
One of the statements in the block may be a return statement which causes the call to the function to evaluate to the returned value.


1. Introduction
---------------

o) What can we use Javascript for?
- Build Webapps
- Use JavaScript on Server to build APIs and give data to other services
- Build mobile Apps
- Build desktop applications

o) Who is it for?
- JavaScript makes applications more interactive
- Learn what JavaScript is and what it's for

o) JavaScript
- ECMAScript is the official name that is built by a community that defines which sets of the language features gets realeased
- They release new versions nearly every year
- Nearly all browsers work with the newest features (ecept IE most of the time)

o) Our Path
- Learn the tools
- Learn the basics
- Build real things

o) Main Takeaway of this course should be:
- HTML gives the structure to our websites or applications
- CSS styles out the HTML and shows pretty things
- JS brings us the interaction with the websites or applications


2. Tools
---------
o) Our Tools
- JavaScript needs to be run by a enginge so that we can use our code. This is done by all of the major Browsers (Chrome, Firefox, Safari,...)
- The Browser gives us some convenient tools that help us to view whats going on in our website and debug it. We can inspect elements, properties and even change some things temporarly
- The Console is also part of the DevTools that allows us to run JavaScript code direclty on the website. This only is executed as long as the page is not reloaded or the browser closed
- Visual Stuio Code which is a great editor that we use to edit the files

o) DevTools
-) Can be opened on any page in the web by right clicking it and choosing "inspect"
-) This opens up the developer tools that is structured into different tabs that we can use
-) We will use mostly the "Elements" tag which shows the HTML structure and the CSS and also the "Console" tag which we use to write JavaScript temporarly
.
o) The Window Object
-) JavaScript needs a global object that includes all the things that are needed to run this object is called the "window"
-) Iniside the "window" we have the "document" which is our site. Think of the window as the browser and the document as the current page we have opened


3. Hello World
--------------
-) Create first a empty boilerplate of HTML by using ! and TAB in VSCode
-) Then we add the bootstrap library which gives us a better look and some other utilities. We add it just by using a link to a Cloud Delivery Network which is basically a server from where we download all necessary files once we open our page. We could also add it locally but this would require use to ship it with the files.
-) Normally we build the structure with HTML and then style it with some CSS then later on we bring in the interaction by using JavaScript
-) Then we add some styles in the "hello_world.css" file for some basic apperance changes. No JS yet is added.
-) Now we want to change some HTML on the site for example with JS. Let's take the h1 tag we have.
	- First we have to find the element
	- Then we have to change the element or it's attributes or apperance
-) Working with JS is basically look at the DOM (Document Object Model) grab something that we need and change it. We can test our code always in the developer console
-) We will take a look at all parts then sperately but we want to show quickly what JS can do.
-) To bring it from the console to the html file we add a script file or a script tag to the bottom of the HTML file
-) We take the header by using the document and a method on this object and then change one property on the resulting object
-) Next we are adding a button element which we will give a interactivity by using JS
	- Clicking the button should actually change the text
	- We have to wait for a user interaction before we change the text by using the onclick property which calls a function inside of our JavaScript
	- Once we click the button as the user the text changes as we added functionality and interactivity with JS
-) We will discuss later what are variables, what are functions and methods, what are the attributes we attach to the button and so on but for now we have our first fully functional working program


4. Types & Variables
--------------------
o) Types we have and how to declare variables
-) Its important to know what types are avaialable and how to assign them to different variables
-) Every line generally ends with a semicolon although they are technically not needed its a really good convention and sometimes also prevents errors
-) We generally can declare a variable and later initialize it or we can immediatley declare and initialize a varaible in one line
	
o) Types
-) There are STRINGS which is basically everything we write that is wrapped in apostrophes so for example 'this is my string' and "this is my string" while both methods are valid and viable
	- There is no difference between double and single quotes
	- A speciality are the template strings which start with backticks. These can be used to create multiline strings and also include variables inside that resolve to the value that is stored in them
-) There are NUMBERS which are always considered floats which means they are treated as decimals. Also if we just write 10 it will be treated as 10.0
-) There are BOOLEANS which can only have two states either true or false or 1 and 0 which is the same
	- They also help to evaluate if something is truthy or falsy which we can easily demonstrate by using for example the console to log out a string and an empty strings
	- The boolean can evaluate a variable to tell if its truthy or falsy
-) There are SPECIALS also
	- undefined is when a variable is created for example and not assigned a value yet
	- null actually means that there is no value which is means it is defined but has the value null which differs from the numeric value of 0 or zero
	- NaN which means that the value is not a number
-) Then there are OBJECTS which is the most important part of JS

o) Objects
-) A object is created with curly braces. This basically defines a object. We can create an example object and store it in a variable
-) A object consists always of a key and value pair. On the left side is the key and on the right side, seperated by a double colon, the value
-) It's important to seperate each key value pair by a comma which indicates a new key value pair. Normally there is one key value pair per line which makes it more easy to understand and creates a better overview
-) An object can hold multiple different things an associate it all with one variable
-) Object values can be accessed by calling the object and the key with dot notation or brackets notation which has the advantage of enabling us to use variables or even words that are not written together

o) Arrays
-) An array is a way so that we can store multiple items
-) Arrays are basically for listing things up that can be accessed by there index
-) We cant access the array by key but we need to access them by their index number which starts at 0 so the first item is at position 0 and the second item at position 1 and so on
-) We access them with brackets
-) Arrays can even have strings and numbers and objects mixed which is one special aspect of JS
-) Most of the time we stick to one type per array only but the most common are the array of numbers and the array of objects

o) Declaring Variables
-) Original variables have been declared with the keyword "var" which is now deprecated
-) Nowadays we use the keywords "const" and "let" which are more stable and consistent to other languages and have some other features aside
-) Const means we can not reassign the variable once it is inizialied (note its not declared but initialized, so we can declare it before and initialize it afterwards but only once)
-) Let allows us to reassaing a variable after it is initialized and declared and also scopes the variable to the current scope. This is the big difference to var which is globally available and this could often lead to issues
-) If const is an object we can not reassign a new object but we can reassign the individual values for the key - value pairs
-) When we declare a variable with out assigning a value its per default "undefined". We then can assign a value to the variable once the value is available for example from a user input. A good practice is to defined or declare all variables at the top of the file and later use and initialize them if we don't know from the beginning what they are


5. Operators
-------------
-) We can think of operators like the normal arithmetic operations (incrementing, decrementing, addition, substraction, etc)
-) There are also more advanced operators we will come accross later on that are mainly for conditional evaluation of statements

o) Addition
-) First we create some variables that we will use and we will use the console.log() to print our operations on the browsers devleoper console
-) At first there is the + operater which has various functionalities. If we use numbers they are added up like one would expect normally
-) We can also add up strings together which is basically no addition but more a concatination of strings so we are combining them or merging them into one string
-) If we add a number and a string together the string will be concatanated to the number and the result will be a string. We can see this in the console by the different colors. However we can always check the result with a typeof infront of any variable or return value
-) Generally JS is a dynamically typed language. This means whatever we assign to a variable we don't have to assign a type to it. Later on we can even change the type contrary to other languages that stick with one type. Basically JS has the ability to convert things on the fly while its evaluating information

o) Substraction
-) If we substract a number from another number thats pretty straight forward
-) However if we substract two strings from each other we get NaN and not as we maybe expect a shorter string (there are other methods for this)
-) Interesting it gets when we are substracting from a number a string that evaluates to a number. Assume we have the number 10 and substract the string '5' then we get the result of 5 as number contrary to the addtion which produces a string again
-) The same principal applies also if we substract from a string that evaluates to a number another number
-) If we substract a number from a normal string or vice versa we also get NaN

o) Multiplication
-) We can muliply numbers pretty straight forward as we would also do normally by using the asterix symbol
-) If we muliply a string that evalutes to a number with a number we get also a number as result. Same as for the substraction
-) If we multiply a string with a string or a number we just get NaN again

o) Division
-) Also division works basically the same as multiplication for numbers
-) If we defined a number by another number with some rest we can see that numbers are represented as floating points

o) Incrementing
-) Incrementation can be done by using the ++ operator which increseas the number by one. This will mostly be used in loops later or as counter when certain conditions are met
-) We can also always increment any variable that is a number by another number with the + sign. However, incrementation differs from addition in beign a repetative task
-) The main difference is that the increment operator changes the original variable thats why we would run into an error when we are using "const" as they can only be initialized once
-) Also if we log this to the console we will see the previous value before the incrementation. If we log the variable we incremented again we see the new value. This shows us that the increment operator is a special one which not only changes the original variable but also returns the previous state kind of like a function
-) If we prepent the increment operator we will immediatley see the new value when we log it. So for example console.log(++a) will immediately print the new value contrary to console.log(a++)
-) Incrementing strings results in a NaN again
-) We can also combine the asseration to a new variable which we want to increment with the operator. Suppose we have a variable c which we want to increment by 2 and save back to c again. We could do this with c = c + 2 or we could use the shorthand c += 2

o) Decrementing
-) The same rules that are applied to incrementing also apply to decrementing with only the fact changing that the value gets decreased either by one with the -- operator or by any other value
-) The decerement operator -- behaves the same as the increment operator otherwise
-) Decrementing strings results in a NaN again
-) Like the increment shorthand combined with assertation there is one for decrement which is -=


6. Comparison
--------------
-) Compoarsions is gonna be a way so that we can see if one value or one variable is equal to another variable or value
-) We will start off by using strings to compare them which are the easiest and then numbers and booleans

o) Strings
-) We start with a string like "Susan" and another one called "SUSAN" just with upper case letters. We are going to compare them now with the comparison operator which is == or === (later more detail)
-) Remember to not use a single = sign as this would be an assignment and not a comparison
-) If we compare those two trings now and log the result to the console we are going to see the result of false which means JavaScript is case sensitive when it does comparisons
-) If we compare the first string with itself we will obiviously get the result of true. We can also achieve this by transforming the second one and first one to lower case with a built in string method called "toLowerCase()" that makes them uniform
-) However we were still using the double equal (==) sign and not the tripple equal (===) sign which is generally adviced to be used. The difference is that one checks for the type of the variable while the other doesn't (later more)

o) Numbers
-) Suppose now we have again two variables defined which are the numeric value 10 and the string "10" which is probably the same as it both says 10. Just one without the quotes. However, it is not the same as one is a number and one a string
-) If we use now the double equal sign again we will see that the two variables are the same or the comparsion results in true which means they are the same. The reason is that JavaScript compares only the value now and not also the type if both are numbers or strings for example
-) In the background JavaScript is doing a Coercion or more easily said JavaScript is a dynamically typed language which will convert the number to a string in order to compare two strings
-) Two equal signs means are the equal and we allow coercion. If we do on the other hand three equal signs this means that JS will check if they are equal and if their type is the same
-) Generally we stick to the three equal signs but we can also use the two ones if we are aware of coercion
-) We can also test for non equality by replacing one equal sign with a exclamation mark. This leaves us with the two possible ways to test for non equality with != and !== while the later checks again the type

o) Booleans
-) JS comes with the Boolean() method which helps us to evaluate if something is true or not. We make use of this by creating two other variables, one undefined and one with the value of null
-) With the Boolean() method we can check if a variable is truthy, which means it has a value
-) We can then test all our variables if they are truthy or not and we will see that our undefined one and the null one are not as they have no value defined
-) We can also do this for objects as well and if we evaluate a empty object we will see that JS considers it also truthy. The same is applied for an empty array

o) Arrays and Objects
-) For comparing arrays we first create two variables that hold arrays of the same length with the same values inside. Only the variable names are different
-) The same thing we are going to do for objects. We create two variables that hold a object each which at first looks the same
-) Comparing the two same appearing arrays and objects we will see in both cases false as result even if we use the tripple equal sign or the double equal sign
-) The reason is that JS treats each of our four variables as a unique object internally. This means each has its own reference and referencing points and values
-) We can compare objects then by looking through all keys individually if they are the same
-) The same goes for arrays where we would have to compare each items individually if their values are the same
-) However we could technically make our examples work by saving the first array in the second by not re creating it but by pointing directly to the first. This can be done by assigning the reference or variable to the second one. The same is possible for the objects. Watch out for this as this can often be the cause of erros

o) And Or && ||
-) We can combine comparsions that normally would evaluate each to a true or false value to one value by using the && (AND) Operator or the || (OR) Operator
-) If we are using the && operator both expressions have to evaluate to true in order to make the whole statement appear as true. If one side evaluates to false the whole statement is false
-) Contrary the || operator requires only either side to evaluate to true in order to make the whole experession true
-) We can of course chain multiple OR and AND operators together by adding them after each expression. The whole statement will evaluate to true or false then
-) We can flip a whole statement or one expression inside by prepending a exclamation mark infront of it


7. Conditionals & Loops
------------------------
-) We can think of conditionals as pathways when we are manovering through our application
-) For instance lets assume we have a variable defined with a name as value and we want say hello to only the person with the specific name. We can check with conditionals if the name of the person matches a specific one and then log the hello to the console
-) Basically we only one certain actions to happen if certain conditions are met throughout our program
-) All loops and if statements work technically the same. We pass in a conditon and then a block of code that runs if the condition is met or not
-) We dont need a ; after loops or conditionals as they are not really a statement

o) If Statements
-----------------
-) A if statement starts with the keyword "if" that is followed by normal braces which enclose the condition that has to be met (needs to resolve to true). The condition can be any other statement or expression that evaluates to a boolean value of false or true
-) The if block is only executed when the statement that is evaluated is true. Otherwise the "else" block is executed or nothing if the else block is not defined
-) The blocks are always seperated from the rest of the program with curly braces
-) A if statement or an if - else statement is the most common conditional block we will see accross all programming languages
-) Furthermore there is a "else if" which is also a statement block like the if that we can use as often as we want in between the if and else parts
-) The most basic conditional is a if block with no else. Then there is a if with and else block where one is guaranteed to happen. Then there is the if else block with multiple or one "else if" between them each with one condition that also has to be met
-) This we we can build a lot of conditional statements or cases that we can cover. We will learn later on a much more convenient method then using "else if" (the switch case statement)
-) To test our if, else if and else blocks we can make use of another handy function the prompt() which asks the user for a input and returns the given value. This value we save in a variable that we can use to test trough our conditions
-) Of course, we can also use operators in our if or else if conditionals that all have to evaluate to one true or false value

o) For Loop
-) With a for loop we can do repetative tasks, may it be executing a certain command several times (instead of writing it all the time) or reading out some values of an array or object. The later is the most common use case as we will use for loops often for arrays and even objects
-) We can see a for loop in action when we want to print an array of objects, where each object represents a dog with it's name and type to the DOM. For this we need a reference on the DOM which we can get by using the "document.querySelector()" object and method which comes with every browser
-) A for loop consists of three parts, the first is a variable that works as a counter (often initialized with 0 or starting from 0), a stop conditon (often the arrays length which we can get with Array.length property) and finally a incrementation of the initial counter
-) All three parts of the for loop are seperated by a ; not by a normal comma as this is technically not a method with parameters
-) We can use then the iterator variable as its called, to print out our objects or do other things with them as long as the iterator is smaller than the array size. As we are starting at 0 with the index we will meet each item

o) While Loop
-) We can do the same we did with the for loop previously also with the while loop. A while loop has a bit different structure and needs a stop condition in order to not go infinite
-) We can basically achieve the same result we did before with a while loop by adding some cat names now
-) It only varies in the syntax for now (later more)

o) Do While Loop
-) Also the do while loop can achieve the same result this time for birds
-) The syntax is different as well but achieves the same result

o) For Of Iterator
-) This was introduced later and is a more simple and cleaner way to iterate over arrays and objects. Technically it is less performant but that shall not bother us as it is only about nanoseconds
-) With this loop we say that we iterate as many times through the array as there are objects inside
-) We can do this with our array of fishes now that we create and we will add objects to it as we did before. However this time we only need to write a short version and don't even need a iterator


8. Functions
-------------
-) Functions are not only one of the biggest parts of JavaScript, but also of every other programming language or the programming in general. There is even contrary to the Object Oriented Approach a Functional Programming approach
-) We will take a look at the behaviour of functions by just creating a simple button in html that will execute our function once it is clicked. Therefore we need a onClick listener and a method that is executed once the button is clicked
-) A function is a way so that we can combine a set of functionality into common blocks (named blocks). This way we can reuse the function as often was we want
-) Functions allow us to wrap a certain set of code into a very simple block that we can reuse -- Reusability
 
o) Functions with no return value
-) Lets start with simple function first. Assume we want to log "hello" to the console once and then later in our program again. We could always write the same thing over and over again but we would break the rule of DRY (Dont Repeat Yourself). This is also hard to maintain as we would need to change it in different locations
-) A function is created with the keyword function, followed by the name of the function with two bracets. If the function doesnt require any parameters we leave the bracets empty otherwise we write there the list of parameters the function requires
-) To call a function we just write it's name somewhere followed by the bracets () that are either filled with parameters or left empty if we don't need any parameters
-) If we want to add a parameter to our funciton or more we add them to the parenthesis. The name of the parameter can be anything we like as the value that is passed will be stored in this parameter or variable if you want to think of it like a variable. Inside the function we then have access to the parameter by using the name just like a normal variable
-) As the parameters behave like variables we can set a default value if they are not passed by just assigning inside the parenthesis of the function definition a value to the parameter we want to initilaize. This is useful when we want to call the function  even if it doesn't get a value passed
-) If we don't set a default value for the parameter then this parameter is required and makes the function unusable or not runable without it
-) We can also add further parameters to the function defintion by just seperating them by a comma

o) Functions with a return value
-) If we write the keyword "return" inside a function block we immediatley stop the function there if we reach the line with the keyword. Therfore, normally this keyword is written last
-) With return we enable the function to return a value once it is called. The value doesn't need to be saved but normally it will be. So suppose we have a function that gets a number as input and squares it. We can create this easily by using the function keyword with a return statement
-) As the function is returning a value we can direclty call it inside the console.log(...) statement or we can save its value previously into a variable and then log the variable. But lets just save some lines and time

o) Functions with Buttons
-) Now we duplicate our previously created button and add to both buttons a onclick listener. This listener we are going to pass one of our functions which we also can provide some parameters
-) A listener always requires a function to be passed. We could technically also anonymously define one (inline) the html but that i not common practice. Often enough though when a inline function is needed we don't need to explicitly create a named function as we might as well use it only once. This often happens with callbacks (later more)
-) We can then pass in the custom variables to our button methods we want them to have when we click them. We are therefore using the same function again but with different arguments

o) Functions in JS
-) Whats unique to functions in JavaScript is that they can be stored in a variable just like a string for example. A function is also considered to be a value
-) This enables us to do functional programming (contrary to Object Oriented Programming)
-) We can declare a function as a variable just as we would declare any other variable by assigning it as value. The only difference is that we don't need to name the function anymore (anonymous function) because we have a variable name
-) Calling them is the same as we would do when we not define them as variable or store them in one
-) This enables us for example to copy the function and store it in a nother variable by just assigning it to a differen variable name
-) Another important thing is the usage of arrow functions which camem in ES6. They are technically the same although they have not their own this context (later more in Objects and Classes). They are often shorter to write and more handy especially as we don't need the function keyword anymore
	- Arrow function without parameters: () => { }
	- Arrow function with parameters: (a, b) => { }
	- There are even more shorthands for the ones above especially if we have one value we can omit the bracets or if we return in one line we can omit the return value and the curly braces

o) Hoisting
-) Means that JavaScript is gonna take a function we declared with the function keyword (standard way) anywhere in our code and move it to the top before it runs the other code
-) This means that all functions that are declared with function Name()... are moved to the top and we can call them wherever we want in our code because they will automatically be moved to the top
-) Normally you cant call a function before declaring it. However, JavaScript makes this possible with Hoisting
-) If we declare the function as variable we can't use the hoisting functionality. Only funciton declartions get hoisted to the top of the code


9. Objects
-----------
-) Although we learned a lot about different types and functions we should be aware that basically everything in JavaScript is considered to be an object
-) First lets talk about normal objects that we can create ourself
-) If we assign a variable inside a object its called a property. So if we want to access a property we would use the objects name, which is the variable name we assigned to the object (remember it starts and ends with {}), then a dot and then the propertys name or the key
-) For example suppose we have a object called "hero" with the three keys "name, alias, catchpharse", then we would get the name of our hero we stored inside the object by using "hero.name"
	- Another way to access the "name" would be "hero['name']"
	- If we use the bracket notation we need to enclose the name in quotes as it needs to be a string (the key)
	- The bracket notation helps if we have a key we are going to look for stored in a variable that is somehow a user input or any other source
	- For example we have a variable called "thingToLookFor = 'alias'" that holds the key we are looking for in our object. We could not use the dot notation like "hero.thingToLookFor" because this would assume it is a property or key in our object. Therefore we use "hero[thingToLookFor]".
-) Objects can not only hold simple values like strings, booleans, numbers but also functions or even other objects and arrays. The possiblities of nested objects are endless
-) We are going to add a function to our hero object the will say the name of our hero once called. We name the function "speak" and we stay in the same pattern with key : value pairs but this time the value is an anonymous function
	- The function returns a string which contains for example the "catchpharse" property of our object. However, we can access the property not by just writing "return catchpharse" we need to access it as part of our object
	- Inside our object we cant call obviously "hero.catchpharse" thats why there is the "this" keyword which references the current object instance
	- If a function is defined inside of an object the right term for it is method and not property. A method is a function of a class or object (later more)
	- Of course we are also able to pass parameters to these methods here just like any other function
	- We call the methods of the object by using the dot notation just as we did before with properties but we append the usual brackets () like we would do for any other function as well. Inside the brackets we can pass parameters if needed or not
	- If we call the methods with out the brackets like we would with a normal property we would see the definition of the function as it's stored like a normal value inside an object
-) Accessing the properties and methods of an object is a very important part of JavaScript. We have done this before as we accessed for example the "toUpperCase()" method on a string. Even if we write a normal string in quotes and append ".toUpperCase()" it will work as the string is nothing other than a object internally with properties and methods


10. Built-In Objects
---------------------
-) JavaScript comes with many built in objects. JavaScript is also a dynamically typed language so we are able to coerce one type to another
-) If we take for example a string and apply the method "toUpperCase()" directly on it the primitive string type will be converted to an object of type string and call the method. With String we can create an object of type string
-) Even if we compare the primitive string type with the String as object type we will see that the result is true. Even the types are equal although one is a prmitive.
-) A primitive just means it is not an object yet technically although there is a complimentary type as object for all primitives (Boolean, Number, String)
-) JavaScript generally needs a place to run and that is our browser. Inside our browser we have another useful built-in object which is the "window" object which holds everything that is iniside of our application
	- In addtion to that we get access to the "document" through the window
	- Even the "window" is itself an object which holds our whole JavaScript application
	- We don't need to prepend "window" to every built-in object as JavaScript will do this for us when we write for example "String". Theoretically it would be "window.String"
-) If we want to see the actual object of "String" for example by using the "typeof" operator we would have to create the string with the keyword "new" (later more in classes). With this keyword we create a new Instance or Object of Type String which is an object 
-) All the built-in objects have methods or functions within them that we can access. We will take a look at some of them now
-) There are often already built in methods from objects that we need and we should take a look at them before we implement them ourself

o) Strings
-) We already use the methods .toLowerCase() and .toUpperCase() but there are much more available on the String Object type. We call them all by using the name of the method and the brackets (either with parameters or not). If we omit the brackets we get the function defintion behind the method
-) For example there is .startsWith('...') which checks if the string starts with the passed string of the method
-) There is also .repeat(number) which reapeats the string it is called on the given times
-) If we want to make sure there are no spaces at the beginning or end of a string we would use .trim()
-) There are much more methods available for strings that are really helpful when working with strings

o) Numbers and Math
-) We can call also a .toString() method on a number in order to convert it to a string as the name says. However, we have to wrap it in parenthesis or write two dots (if it is not a floating number from begin) in order to tell JavaScript that this is a number and we ant to call a method. Remember that numbers are considered to be floats always
-) We can also use the global Object Number and there for example method which is called .isInteger(). As the name suggests this method will tell use with "true" or "false" if the given number is an integer. So we are able to produce the behaviour of integers although all numbers are considered floats
-) There are also all other sorts of methods for Number like for String that we can use, like for example .toFixed(number) which removes as many floating points as we define
-) Additionally to all that there is a really useful Object, which is called "Math". It has a lot of features like (sum, random values, absolute values, squareroot, etc.) and they can all be called by using the Math object with the respective method
-) The cool thing is we can combine them by chaining methods together. Method chaining is when we apply one method and immediately afterwards another method or even more. As they are processed from left to right the first will be called and returns a value which the second one operates on. For example Math.random().toFixed(2) will generate first a random number between 0 and 1 and then convert it to only 2 decimals

o) Arrays
-) Arrays are a really powerful construct in programming in general and also in JavaScript. We can use them to group items together or do other things
-) Arrays have a lot of methods which are a great help for working with them. For example one of the simpliest properties is the "length" which is not a method but just a property we can call on any Array. It will return us the length of the array or how many items are in there
-) Another method is the ".join()" which allows us to combine all elements of the array with the given delimter in the parenthesis and make one string out of it
-) If we would add another element to the array we would use the .push() method which adds the element given in the parenthesis to the end of the array. There is also a method to add it to the beginning. There are even methods to remove one from the last positon or the first positon. If we use the methods we always get as return the new array length
-) We can also use the ".forEach()" method which loops over each element of the array and has as an argument an anonymous functions